// Copyright 2011, 2012, 2013
//
// Maxime Reis (JRL/LAAS, CNRS/AIST)
// Sébastien Barthélémy (Aldebaran Robotics)
//
// This file is part of metapod.
// metapod is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// metapod is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// You should have received a copy of the GNU Lesser General Public License
// along with metapod.  If not, see <http://www.gnu.org/licenses/>.

// This file has been generated by the metapod robotbuilder library.

# include "simple_arm.hh"

namespace metapod {
namespace simple_arm {

// Initialization of the robot global constants
Eigen::Matrix< FloatType, Robot::NBDOF, Robot::NBDOF > Robot::H;

  INITIALIZE_JOINT_REVOLUTE_AXIS_ANY(SHOULDER, 1, 0, 0);
  const std::string SHOULDER::name = "SHOULDER";
  const int SHOULDER::label = 0;
  const int SHOULDER::positionInConf = 0;
  const Spatial::Transform SHOULDER::Xt = Spatial::Transform(
    matrix3dMaker(
      2.22045e-16, 0, 1,
      0, 1, 0,
      -1, 0, 2.22045e-16),
    Vector3d(
      0, 0, 1));

  INITIALIZE_BODY(ARM);
  const std::string ARM::name = "ARM";
  const int ARM::label = 0;
  const FloatType ARM::mass = 2.75;
  const Vector3d ARM::CoM = Vector3d(0, 0, -0.225);
  const Matrix3d ARM::inertie = matrix3dMaker(
    0.0468703, 0, 0,
    0, 0.0468703, 0,
    0, 0, 0.000928125);
  Spatial::Inertia ARM::I = spatialInertiaMaker(ARM::mass, ARM::CoM, ARM::inertie);

  INITIALIZE_JOINT_REVOLUTE_AXIS_ANY(ELBOW, 1, 0, 0);
  const std::string ELBOW::name = "ELBOW";
  const int ELBOW::label = 1;
  const int ELBOW::positionInConf = 1;
  const Spatial::Transform ELBOW::Xt = Spatial::Transform(
    matrix3dMaker(
      1, 0, 0,
      0, 1, 0,
      0, 0, 1),
    Vector3d(
      0, 0, -0.45));

  INITIALIZE_BODY(FOREARM);
  const std::string FOREARM::name = "FOREARM";
  const int FOREARM::label = 1;
  const FloatType FOREARM::mass = 1.75;
  const Vector3d FOREARM::CoM = Vector3d(0, 0, -0.2);
  const Matrix3d FOREARM::inertie = matrix3dMaker(
    0.0235667, 0, 0,
    0, 0.0235667, 0,
    0, 0, 0.000466667);
  Spatial::Inertia FOREARM::I = spatialInertiaMaker(FOREARM::mass, FOREARM::CoM, FOREARM::inertie);

  INITIALIZE_JOINT_REVOLUTE_AXIS_ANY(WRIST, 1, 0, 0);
  const std::string WRIST::name = "WRIST";
  const int WRIST::label = 2;
  const int WRIST::positionInConf = 2;
  const Spatial::Transform WRIST::Xt = Spatial::Transform(
    matrix3dMaker(
      1, 0, 0,
      0, 1, 0,
      0, 0, 1),
    Vector3d(
      0, 0, -0.4));

  INITIALIZE_BODY(HAND);
  const std::string HAND::name = "HAND";
  const int HAND::label = 2;
  const FloatType HAND::mass = 0.5;
  const Vector3d HAND::CoM = Vector3d(0, 0, -0.075);
  const Matrix3d HAND::inertie = matrix3dMaker(
    0.000946875, 0, 0,
    0, 0.000946875, 0,
    0, 0, 1.875e-05);
  Spatial::Inertia HAND::I = spatialInertiaMaker(HAND::mass, HAND::CoM, HAND::inertie);

} // closing namespace simple_arm
} // closing namespace metapod
